<algorithm>
function Dijkstra(Graph, source):
    <state name="init">for each vertex <variable name="v" /> in Graph:
        <variable name="dist" />[<variable name="v" />] := infinity;
        <variable name="previous" />[<variable name="v" />] := undefined;
    end for;</state>
    <variable name="dist" />[<variable name="source" />] := 0;
    <variable name="Q" /> := the set of all nodes in Graph;
    while <variable name="Q" /> is not empty:
        <state name="select-min"><variable name="u" /> := vertex in <variable name="Q" /> with smallest distance in <variable name="dist" />[];</state>
        if <variable name="dist" />[<variable name="u" />] = infinity:
            <state name="remaining-nodes-inaccessible">break;</state>
        end if;
        <state name="relax-init">remove <variable name="u" /> from <variable name="Q" />;</state>
        <state name="loop">for each <variable name="neighbor" /> <variable name="v" /> of <variable name="u" /> where v has not yet been removed from <variable name="Q" />:</state>
            <state name="relax"><variable name="alt" /> := <variable name="dist" />[<variable name="u" />] + dist_between(<variable name="u" />, <variable name="v" />);
            if <variable name="alt" /> < <variable name="dist" />[<variable name="v" />]:
                <variable name="dist" />[<variable name="v" />] := <variable name="alt" />;
                <variable name="previous" />[<variable name="v" />] := <variable name="u" />;
            end if;</state>
        end for;
    end while;
<state name="all-nodes-processed">end Dijkstra.</state>
</algorithm>